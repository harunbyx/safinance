import os
from flask import Flask, jsonify, request
from flask_cors import CORS
from isyatirimhisse import StockData
import pandas as pd
import json
import time
from datetime import datetime, timedelta

app = Flask(__name__)
CORS(app)

# BIST100 + BIST30 Kapsamlƒ± Hisse Listesi (130 hisse)
TEST_STOCKS = [
    # BIST30 Ana Hisseler (En b√ºy√ºk 30 ≈üirket)
    'AKBNK', 'ARCLK', 'ASELS', 'BIMAS', 'EKGYO', 'EREGL', 'FROTO', 'GARAN', 'GUBRF', 'HALKB',
    'ISCTR', 'KCHOL', 'KOZAL', 'KOZAA', 'KRDMD', 'MGROS', 'PETKM', 'PGSUS', 'SAHOL', 'SASA',
    'SISE', 'SOKM', 'TAVHL', 'TCELL', 'THYAO', 'TKFEN', 'TOASO', 'TUPRS', 'VAKBN', 'YKBNK',
    
    # BIST100 Bankacƒ±lƒ±k Sekt√∂r√º
    'TSKB', 'ALBRK', 'ICBCT', 'QNBFB', 'DENIZ', 'SKBNK', 'ZIRAA', 'KLNMA',
    
    # BIST100 Teknoloji ve Telekom√ºnikasyon
    'TTKOM', 'NETAS', 'LOGO', 'LINK', 'INDES', 'ARENA', 'DGATE', 'SELEC', 'KRONT', 'DESPC',
    'ARMDA', 'ESCOM', 'FONET', 'KAREL', 'KFEIN', 'PAMEL', 'SMART', 'VERTU', 'ALCTL',
    
    # BIST100 Perakende ve T√ºketim
    'BIZIM', 'MAVI', 'DESA', 'MPARK', 'ROYAL', 'ADEL', 'CRFSA', 'HATEK', 'ULKER', 'BANVT',
    'CCOLA', 'KNFRT', 'PETUN', 'PINSU', 'TATGD', 'TUKAS', 'VANGD', 'AEFES', 'KENT',
    
    # BIST100 Enerji ve Petrokimya
    'TPAO', 'AYGAZ', 'AKSA', 'ZORLU', 'ZOREN', 'AKSEN', 'SOKE', 'ALKIM', 'BAGFS', 'BRISA',
    'DYOBY', 'EGEEN', 'ENKAI', 'GOODY', 'HEKTS', 'IZMDC', 'KAPLM', 'KLMSN', 'OTKAR', 'PARSN',
    
    # BIST100 Sanayi ve ƒ∞malat
    'SARKY', 'BFREN', 'VESTL', 'CEMTS', 'DOHOL', 'FMIZP', 'GOLTS', 'IHLAS', 'KARSN', 'KONYA',
    'MRSHL', 'NUHCM', 'PRKME', 'SILVR', 'TMPOL', 'TRKCM', 'UNYEC', 'YATAS', 'ANACM', 'BRSAN',
    
    # BIST100 Gayrimenkul ve ƒ∞n≈üaat
    'EMLAK', 'GOZDE', 'ISGYO', 'KOSGB', 'METUR', 'NUGYO', 'OZKGY', 'RYGYO', 'TRGYO', 'VAKGM',
    'VKGYO', 'YKGYO', 'AKGRT', 'DEVA'
]

# Gelecekte kullanƒ±lacak tam liste (≈üimdilik yorum satƒ±rƒ±nda)
"""
FULL_BIST_STOCKS = [
    # T√ºm 200+ hisse buraya gelecek
    # ≈ûimdilik performans i√ßin 50 hisse ile test ediyoruz
]
"""

# StockData sƒ±nƒ±fƒ±nƒ± ba≈ülat
stock_data = StockData()

# Cache sistemi
CACHE = {
    'data': {},
    'last_update': None,
    'update_interval': 7200  # 2 saat (saniye cinsinden)
}

def is_cache_valid():
    """Cache'in ge√ßerli olup olmadƒ±ƒüƒ±nƒ± kontrol et"""
    if CACHE['last_update'] is None:
        return False
    
    time_diff = datetime.now() - CACHE['last_update']
    return time_diff.total_seconds() < CACHE['update_interval']

def update_cache():
    """Cache'i g√ºncelle"""
    print("üîÑ Cache g√ºncelleniyor...")
    start_time = time.time()
    
    prices = {}
    for symbol in TEST_STOCKS:
        try:
            print(f"üîÑ {symbol} i√ßin veri √ßekiliyor...")
            
            # Son 5 i≈ülem g√ºn√ºn√ºn verisini √ßek (borsa kapalƒ±ysa son i≈ülem g√ºn√º)
            from datetime import datetime, timedelta
            end_date = datetime.now().strftime('%d-%m-%Y')
            start_date = (datetime.now() - timedelta(days=5)).strftime('%d-%m-%Y')
            
            data = stock_data.get_data(
                symbols=[symbol],
                start_date=start_date,
                end_date=end_date,
                exchange='0',  # TRY
                frequency='1d'
            )
            
            if not data.empty:
                # CODE s√ºtununda hisse sembol√º var mƒ± kontrol et
                if 'CODE' in data.columns and 'CLOSING_TL' in data.columns:
                    # ƒ∞lgili hisse i√ßin verileri filtrele
                    symbol_data = data[data['CODE'] == symbol]
                    
                    if not symbol_data.empty:
                        # En son kapanƒ±≈ü fiyatƒ±nƒ± al
                        latest_price = symbol_data['CLOSING_TL'].iloc[-1]
                        if pd.notna(latest_price):
                            prices[symbol] = round(float(latest_price), 2)
                            print(f"‚úÖ {symbol}: {latest_price:.2f}")
            
            time.sleep(0.1)  # √áok kƒ±sa bekleme
            
        except Exception as e:
            print(f"‚ùå {symbol} hatasƒ±: {str(e)}")
            continue
    
    CACHE['data'] = prices
    CACHE['last_update'] = datetime.now()
    
    elapsed_time = time.time() - start_time
    print(f"‚úÖ Cache g√ºncellendi! {len(prices)} hisse, {elapsed_time:.1f} saniye")
    
    return prices

@app.route('/stocks', methods=['GET'])
def get_stocks():
    try:
        # Cache kontrol et
        if is_cache_valid():
            print("‚úÖ Cache'den veri d√∂nd√ºr√ºl√ºyor")
            cache_age = (datetime.now() - CACHE['last_update']).total_seconds()
            print(f"üìä Cache ya≈üƒ±: {cache_age/60:.1f} dakika")
            return jsonify(CACHE['data'])
        
        # Cache ge√ßersizse g√ºncelle
        print("üîÑ Cache ge√ßersiz, yeni veri √ßekiliyor...")
        prices = update_cache()
        
        if not prices:
            # Test verisi d√∂nd√ºr
            test_prices = {
                'THYAO': 100.50,
                'GARAN': 85.25,
                'AKBNK': 45.75,
                'EREGL': 55.30,
                'PGSUS': 120.80
            }
            print("‚ö†Ô∏è Ger√ßek veri alƒ±namadƒ±, test verisi d√∂nd√ºr√ºl√ºyor")
            return jsonify(test_prices)
            
        return jsonify(prices)
        
    except Exception as e:
        print(f"‚ùå Genel hata: {str(e)}")
        import traceback
        traceback.print_exc()
        
        # Hata durumunda test verisi d√∂nd√ºr
        test_prices = {
            'THYAO': 100.50,
            'GARAN': 85.25,
            'AKBNK': 45.75,
            'EREGL': 55.30,
            'PGSUS': 120.80
        }
        return jsonify(test_prices)

@app.route('/stocks/<symbol>', methods=['GET'])
def get_stock(symbol):
    try:
        # √ñnce cache'den kontrol et
        if is_cache_valid() and symbol in CACHE['data']:
            price = CACHE['data'][symbol]
            print(f"‚úÖ {symbol} cache'den alƒ±ndƒ±: {price}")
            return jsonify({
                "symbol": symbol,
                "price": price
            })
        
        # Cache'de yoksa veya ge√ßersizse ger√ßek zamanlƒ± √ßek
        print(f"üîÑ {symbol} i√ßin ger√ßek zamanlƒ± veri √ßekiliyor...")
        
        # Son 5 i≈ülem g√ºn√ºn√ºn verisini √ßek
        from datetime import datetime, timedelta
        end_date = datetime.now().strftime('%d-%m-%Y')
        start_date = (datetime.now() - timedelta(days=5)).strftime('%d-%m-%Y')
        
        data = stock_data.get_data(
            symbols=[symbol],
            start_date=start_date,
            end_date=end_date,
            exchange='0',  # TRY
            frequency='1d'
        )
        
        if data.empty:
            print(f"‚ùå {symbol} i√ßin veri bulunamadƒ±")
            return jsonify({"error": "Hisse bulunamadƒ±"}), 404
        
        # CODE s√ºtununda hisse sembol√º var mƒ± kontrol et
        if 'CODE' in data.columns and 'CLOSING_TL' in data.columns:
            symbol_data = data[data['CODE'] == symbol]
            
            if not symbol_data.empty:
                latest_price = symbol_data['CLOSING_TL'].iloc[-1]
                if pd.notna(latest_price):
                    price = round(float(latest_price), 2)
                    print(f"‚úÖ {symbol}: {price}")
                    
                    # Cache'i g√ºncelle
                    CACHE['data'][symbol] = price
                    
                    return jsonify({
                        "symbol": symbol,
                        "price": price
                    })
        
        print(f"‚ùå {symbol} i√ßin fiyat verisi bulunamadƒ±")
        return jsonify({"error": "Fiyat verisi bulunamadƒ±"}), 404
            
    except Exception as e:
        print(f"‚ùå {symbol} i√ßin hata: {e}")
        return jsonify({"error": str(e)}), 500

@app.route('/cache-info', methods=['GET'])
def cache_info():
    """Cache durumu hakkƒ±nda bilgi d√∂nd√ºr"""
    if CACHE['last_update']:
        cache_age = (datetime.now() - CACHE['last_update']).total_seconds()
        next_update = CACHE['update_interval'] - cache_age
        
        return jsonify({
            "cache_valid": is_cache_valid(),
            "last_update": CACHE['last_update'].strftime('%Y-%m-%d %H:%M:%S'),
            "cache_age_minutes": round(cache_age / 60, 1),
            "next_update_minutes": round(next_update / 60, 1) if next_update > 0 else 0,
            "stocks_count": len(CACHE['data']),
            "update_interval_hours": CACHE['update_interval'] / 3600
        })
    else:
        return jsonify({
            "cache_valid": False,
            "message": "Cache hen√ºz olu≈üturulmadƒ±"
        })

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    debug_mode = os.environ.get('RAILWAY_ENVIRONMENT') != 'production'
    
    print("üöÄ Safinance Backend ba≈ülatƒ±lƒ±yor...")
    print(f"üìä Cache g√ºncelleme aralƒ±ƒüƒ±: {CACHE['update_interval']/3600} saat")
    print(f"üìà Toplam hisse sayƒ±sƒ±: {len(TEST_STOCKS)}")
    print(f"üåê Port: {port}")
    print(f"üîß Debug mode: {debug_mode}")
    
    app.run(debug=debug_mode, host='0.0.0.0', port=port) 